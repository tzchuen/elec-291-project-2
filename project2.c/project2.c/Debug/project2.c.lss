
project2.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800100  000008e8  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008002aa  008002aa  00000b26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5f  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e9  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  000025fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000346  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3b       	cpi	r26, 0xB2	; 178
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <wait_1ms>:
	while ( ADCSRA & (1<<ADSC) ) ;
	ADCSRA |= (1<<ADSC); // a transformation ?single conversion?
	while ( ADCSRA & (1<<ADSC) );
	ADCSRA &= ~(1<<ADEN); // Disable ADC
	return ADCW;
}
  a6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  aa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ae:	e4 e8       	ldi	r30, 0x84	; 132
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	91 81       	ldd	r25, Z+1	; 0x01
  b6:	82 1b       	sub	r24, r18
  b8:	93 0b       	sbc	r25, r19
  ba:	80 38       	cpi	r24, 0x80	; 128
  bc:	9e 43       	sbci	r25, 0x3E	; 62
  be:	c8 f3       	brcs	.-14     	; 0xb2 <wait_1ms+0xc>
  c0:	08 95       	ret

000000c2 <waitms>:
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	29 f0       	breq	.+10     	; 0xd4 <waitms+0x12>
  ca:	ec 01       	movw	r28, r24
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <wait_1ms>
  d0:	21 97       	sbiw	r28, 0x01	; 1
  d2:	e1 f7       	brne	.-8      	; 0xcc <waitms+0xa>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <__vector_10>:

// Input Capture Unit Interrupt at ICP1 (Pin 14)
ISR (TIMER1_CAPT_vect) 
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	while ((TIFR1&1<<ICF1) == 0);	// Wait for capture
  ec:	b5 9b       	sbis	0x16, 5	; 22
  ee:	fe cf       	rjmp	.-4      	; 0xec <__vector_10+0x12>
	period = ICR1;					// Get timestamp
  f0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
  f4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  f8:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <__data_end+0x1>
  fc:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <__data_end>
	TIFR1 = 1<<ICF1;				// Clear flag
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	86 bb       	out	0x16, r24	; 22
	while ((TIFR1&1<<ICF1) == 0);	// Wait for second capture
 104:	b5 9b       	sbis	0x16, 5	; 22
 106:	fe cf       	rjmp	.-4      	; 0x104 <__vector_10+0x2a>
	period = ICR1 - period;			// Period = time between 2 timestamps
 108:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 10c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 110:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <__data_end>
 114:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <__data_end+0x1>
 118:	82 1b       	sub	r24, r18
 11a:	93 0b       	sbc	r25, r19
 11c:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <__data_end+0x1>
 120:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <__data_end>
	TIFR1 = 1<<ICF1;				// Clear flag
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	86 bb       	out	0x16, r24	; 22
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <main>:
	char key_check [2];
	double lower_period;
	double higher_period;
	double frequency;
	
	waitms(500);	// Give PuTTY a chance to start
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 61 00 	call	0xc2	; 0xc2 <waitms>
	
	usart_init();
 142:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_init>
	
	// Pin/Port configuration
	DDRC  |= 0x00; // All C pins are inputs
 146:	87 b1       	in	r24, 0x07	; 7
 148:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x29; // Set pull-ups for push buttons
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	89 62       	ori	r24, 0x29	; 41
 14e:	88 b9       	out	0x08, r24	; 8
	DDRD  |= 0x9c; // D2,3,4,7 
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	8c 69       	ori	r24, 0x9C	; 156
 154:	8a b9       	out	0x0a, r24	; 10
	 * Yellow1 D3
	 * Yellow2 D4
	 * Speaker D7
	 */
	
	printf(ANSI_CLEAR_SCREEN);
 156:	8e e0       	ldi	r24, 0x0E	; 14
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <printf>
	printf("Metal Detector System v1.0\n"
 162:	83 e1       	ldi	r24, 0x13	; 19
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	9f 93       	push	r25
 168:	8f 93       	push	r24
 16a:	8c e1       	ldi	r24, 0x1C	; 28
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	9f 93       	push	r25
 170:	8f 93       	push	r24
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	9f 93       	push	r25
 178:	8f 93       	push	r24
 17a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <printf>
	"Term: 2019W2\n"
	"Compiled: %s, %s\n\n",
	__DATE__, __TIME__);
	
	// ICU Timer Initializations
	TCCR1A &= 0x00;	// not using compare output modes
 17e:	e0 e8       	ldi	r30, 0x80	; 128
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	10 82       	st	Z, r1
	TCCR1B |= 0xc1; // no noise canceler; capture at rising edge; no prescaling
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 6c       	ori	r24, 0xC1	; 193
 18e:	80 83       	st	Z, r24
	TIFR1 &= ~(0x20); // clear input capture flag
 190:	b5 98       	cbi	0x16, 5	; 22
	
	printf("******SENSOR CALIBRATION******\n"
 192:	89 e9       	ldi	r24, 0x99	; 153
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <puts>
		   "Please ensure sensor is clear of all foreign metal.\n"
		   "Press '1' to continue...\n");
		   
	key_check[0] = usart_getchar();
 19a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <usart_getchar>
	while(key_check[0] != '1');	// do nothing
 19e:	2d b7       	in	r18, 0x3d	; 61
 1a0:	3e b7       	in	r19, 0x3e	; 62
 1a2:	28 5f       	subi	r18, 0xF8	; 248
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	3e bf       	out	0x3e, r19	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	2d bf       	out	0x3d, r18	; 61
 1b0:	81 33       	cpi	r24, 0x31	; 49
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <main+0x7c>
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0x7a>
	
	lower_period = period; 
 1b6:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 1ba:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
	key_check[0] = "x";
	
	PORTD |= 0x10;
 1be:	5c 9a       	sbi	0x0b, 4	; 11
	
	printf("\n\rPlease place some metal directly on the top of the sensor\n"
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <puts>
		   "Press '1' to continue...\n"
		   "******SENSOR CALIBRATION COMPLETE******\n");
	
	key_check[0] = usart_getchar();
 1c8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <usart_getchar>
	while(key_check[0] != '1'); // do nothing
 1cc:	81 33       	cpi	r24, 0x31	; 49
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <main+0x98>
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <main+0x96>
	
	higher_period = period;
 1d2:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__data_end>
 1d6:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__data_end+0x1>
	PORTD |= 0x18;
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	88 61       	ori	r24, 0x18	; 24
 1de:	8b b9       	out	0x0b, r24	; 11
	
	// turn off noise canceling
	TCCR1B |= 0x41; // no noise canceler; capture at rising edge; no prescaling
 1e0:	e1 e8       	ldi	r30, 0x81	; 129
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	81 64       	ori	r24, 0x41	; 65
 1e8:	80 83       	st	Z, r24
		
	printf("Initialization complete!\n");
 1ea:	82 e8       	ldi	r24, 0x82	; 130
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <puts>
	
	PORTD &= ~(0x18);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	87 7e       	andi	r24, 0xE7	; 231
 1f6:	8b b9       	out	0x0b, r24	; 11
	
	PORTD |= 0x10;	// Turn on Yellow1
 1f8:	5c 9a       	sbi	0x0b, 4	; 11
	waitms(200);
 1fa:	88 ec       	ldi	r24, 0xC8	; 200
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 61 00 	call	0xc2	; 0xc2 <waitms>
	PORTD &= ~(0x10); // Turn off Yellow1
 202:	5c 98       	cbi	0x0b, 4	; 11
	
	PORTD |= 0x08;	// Turn on Yellow2
 204:	5b 9a       	sbi	0x0b, 3	; 11
	waitms(200);
 206:	88 ec       	ldi	r24, 0xC8	; 200
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 61 00 	call	0xc2	; 0xc2 <waitms>
	PORTD &= (~0x08);	// Turn off Yellow2
 20e:	5b 98       	cbi	0x0b, 3	; 11
	
	PORTD |= 0x10;	// Turn on Red
 210:	5c 9a       	sbi	0x0b, 4	; 11
	waitms(200);
 212:	88 ec       	ldi	r24, 0xC8	; 200
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 61 00 	call	0xc2	; 0xc2 <waitms>
	PORTD &= ~(0x10); // Turn off Red
 21a:	5c 98       	cbi	0x0b, 4	; 11
	
	PORTD |= 0x80;	// Turn on speaker
 21c:	5f 9a       	sbi	0x0b, 7	; 11
	waitms(200);
 21e:	88 ec       	ldi	r24, 0xC8	; 200
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 61 00 	call	0xc2	; 0xc2 <waitms>
	PORTD &= ~(0x80); // Turn off speaker
 226:	5f 98       	cbi	0x0b, 7	; 11
	printf(ANSI_CURSOR_END_LINE);
 228:	8b e9       	ldi	r24, 0x9B	; 155
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	0e 94 64 01 	call	0x2c8	; 0x2c8 <printf>
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
	
	while (1) 
    {
		// frequency = (double) F_CPU / period;
		printf("\r F= %fHz", frequency);
 238:	c0 ea       	ldi	r28, 0xA0	; 160
 23a:	d2 e0       	ldi	r29, 0x02	; 2
 23c:	1f 92       	push	r1
 23e:	1f 92       	push	r1
 240:	1f 92       	push	r1
 242:	1f 92       	push	r1
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	0e 94 64 01 	call	0x2c8	; 0x2c8 <printf>
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	f1 cf       	rjmp	.-30     	; 0x23c <main+0x102>

0000025a <usart_init>:

static FILE mystdout = FDEV_SETUP_STREAM(usart_putchar_printf, NULL, _FDEV_SETUP_WRITE);

void usart_init( void)
{
	stdout = &mystdout; // setup our stdio stream
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__iob+0x3>
 262:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__iob+0x2>

	// Not necessary; initialize anyway
	DDRD |= _BV(PD1);
 266:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~_BV(PD0);
 268:	50 98       	cbi	0x0a, 0	; 10

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 26a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 26e:	83 e3       	ldi	r24, 0x33	; 51
 270:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	TX_START();
 274:	e1 ec       	ldi	r30, 0xC1	; 193
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	80 83       	st	Z, r24
	RX_START();
 27e:	80 81       	ld	r24, Z
 280:	80 61       	ori	r24, 0x10	; 16
 282:	80 83       	st	Z, r24

	// Set frame format = 8-N-1
	UCSR0C = (_DATA << UCSZ00);
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 28a:	08 95       	ret

0000028c <usart_putchar>:
}

void usart_putchar(char data)
{
	while ( !(UCSR0A & (_BV(UDRE0))) ); // Wait for empty transmit buffer
 28c:	e0 ec       	ldi	r30, 0xC0	; 192
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	90 81       	ld	r25, Z
 292:	95 ff       	sbrs	r25, 5
 294:	fd cf       	rjmp	.-6      	; 0x290 <usart_putchar+0x4>
	UDR0 = data; // Start transmission of data
 296:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 29a:	08 95       	ret

0000029c <usart_putchar_printf>:
		s++;
	}
}

int usart_putchar_printf(char var, FILE *stream)
{
 29c:	cf 93       	push	r28
 29e:	c8 2f       	mov	r28, r24
	if (var == '\n') usart_putchar('\r'); // translate \n to \r + \n
 2a0:	8a 30       	cpi	r24, 0x0A	; 10
 2a2:	19 f4       	brne	.+6      	; 0x2aa <usart_putchar_printf+0xe>
 2a4:	8d e0       	ldi	r24, 0x0D	; 13
 2a6:	0e 94 46 01 	call	0x28c	; 0x28c <usart_putchar>
	usart_putchar(var);
 2aa:	8c 2f       	mov	r24, r28
 2ac:	0e 94 46 01 	call	0x28c	; 0x28c <usart_putchar>
	return 0;
}
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <usart_getchar>:
	UDR0 = data; // Start transmission of data
}

char usart_getchar(void)
{
	while ( !(UCSR0A & (_BV(RXC0))) ); // Wait for incoming data
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	ec f7       	brge	.-6      	; 0x2bc <usart_getchar+0x4>
	return UDR0; // Return received data
 2c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 2c6:	08 95       	ret

000002c8 <printf>:
 2c8:	a0 e0       	ldi	r26, 0x00	; 0
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	ea e6       	ldi	r30, 0x6A	; 106
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	0c 94 4b 04 	jmp	0x896	; 0x896 <__prologue_saves__+0x20>
 2d4:	ae 01       	movw	r20, r28
 2d6:	4b 5f       	subi	r20, 0xFB	; 251
 2d8:	5f 4f       	sbci	r21, 0xFF	; 255
 2da:	fa 01       	movw	r30, r20
 2dc:	61 91       	ld	r22, Z+
 2de:	71 91       	ld	r23, Z+
 2e0:	af 01       	movw	r20, r30
 2e2:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__iob+0x2>
 2e6:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <__iob+0x3>
 2ea:	0e 94 aa 01 	call	0x354	; 0x354 <vfprintf>
 2ee:	e2 e0       	ldi	r30, 0x02	; 2
 2f0:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__epilogue_restores__+0x20>

000002f4 <puts>:
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <__iob+0x2>
 300:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <__iob+0x3>
 304:	23 81       	ldd	r18, Z+3	; 0x03
 306:	21 ff       	sbrs	r18, 1
 308:	1b c0       	rjmp	.+54     	; 0x340 <puts+0x4c>
 30a:	8c 01       	movw	r16, r24
 30c:	d0 e0       	ldi	r29, 0x00	; 0
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	f8 01       	movw	r30, r16
 312:	81 91       	ld	r24, Z+
 314:	8f 01       	movw	r16, r30
 316:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <__iob+0x2>
 31a:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <__iob+0x3>
 31e:	db 01       	movw	r26, r22
 320:	18 96       	adiw	r26, 0x08	; 8
 322:	ed 91       	ld	r30, X+
 324:	fc 91       	ld	r31, X
 326:	19 97       	sbiw	r26, 0x09	; 9
 328:	88 23       	and	r24, r24
 32a:	31 f0       	breq	.+12     	; 0x338 <puts+0x44>
 32c:	09 95       	icall
 32e:	89 2b       	or	r24, r25
 330:	79 f3       	breq	.-34     	; 0x310 <puts+0x1c>
 332:	df ef       	ldi	r29, 0xFF	; 255
 334:	cf ef       	ldi	r28, 0xFF	; 255
 336:	ec cf       	rjmp	.-40     	; 0x310 <puts+0x1c>
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	09 95       	icall
 33c:	89 2b       	or	r24, r25
 33e:	19 f0       	breq	.+6      	; 0x346 <puts+0x52>
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	9f ef       	ldi	r25, 0xFF	; 255
 344:	02 c0       	rjmp	.+4      	; 0x34a <puts+0x56>
 346:	8d 2f       	mov	r24, r29
 348:	9c 2f       	mov	r25, r28
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <vfprintf>:
 354:	ab e0       	ldi	r26, 0x0B	; 11
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e0 eb       	ldi	r30, 0xB0	; 176
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__prologue_saves__>
 360:	6c 01       	movw	r12, r24
 362:	7b 01       	movw	r14, r22
 364:	8a 01       	movw	r16, r20
 366:	fc 01       	movw	r30, r24
 368:	17 82       	std	Z+7, r1	; 0x07
 36a:	16 82       	std	Z+6, r1	; 0x06
 36c:	83 81       	ldd	r24, Z+3	; 0x03
 36e:	81 ff       	sbrs	r24, 1
 370:	cc c1       	rjmp	.+920    	; 0x70a <__LOCK_REGION_LENGTH__+0x30a>
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	3c 01       	movw	r6, r24
 378:	f6 01       	movw	r30, r12
 37a:	93 81       	ldd	r25, Z+3	; 0x03
 37c:	f7 01       	movw	r30, r14
 37e:	93 fd       	sbrc	r25, 3
 380:	85 91       	lpm	r24, Z+
 382:	93 ff       	sbrs	r25, 3
 384:	81 91       	ld	r24, Z+
 386:	7f 01       	movw	r14, r30
 388:	88 23       	and	r24, r24
 38a:	09 f4       	brne	.+2      	; 0x38e <vfprintf+0x3a>
 38c:	ba c1       	rjmp	.+884    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 38e:	85 32       	cpi	r24, 0x25	; 37
 390:	39 f4       	brne	.+14     	; 0x3a0 <vfprintf+0x4c>
 392:	93 fd       	sbrc	r25, 3
 394:	85 91       	lpm	r24, Z+
 396:	93 ff       	sbrs	r25, 3
 398:	81 91       	ld	r24, Z+
 39a:	7f 01       	movw	r14, r30
 39c:	85 32       	cpi	r24, 0x25	; 37
 39e:	29 f4       	brne	.+10     	; 0x3aa <vfprintf+0x56>
 3a0:	b6 01       	movw	r22, r12
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 3a8:	e7 cf       	rjmp	.-50     	; 0x378 <vfprintf+0x24>
 3aa:	91 2c       	mov	r9, r1
 3ac:	21 2c       	mov	r2, r1
 3ae:	31 2c       	mov	r3, r1
 3b0:	ff e1       	ldi	r31, 0x1F	; 31
 3b2:	f3 15       	cp	r31, r3
 3b4:	d8 f0       	brcs	.+54     	; 0x3ec <vfprintf+0x98>
 3b6:	8b 32       	cpi	r24, 0x2B	; 43
 3b8:	79 f0       	breq	.+30     	; 0x3d8 <vfprintf+0x84>
 3ba:	38 f4       	brcc	.+14     	; 0x3ca <vfprintf+0x76>
 3bc:	80 32       	cpi	r24, 0x20	; 32
 3be:	79 f0       	breq	.+30     	; 0x3de <vfprintf+0x8a>
 3c0:	83 32       	cpi	r24, 0x23	; 35
 3c2:	a1 f4       	brne	.+40     	; 0x3ec <vfprintf+0x98>
 3c4:	23 2d       	mov	r18, r3
 3c6:	20 61       	ori	r18, 0x10	; 16
 3c8:	1d c0       	rjmp	.+58     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ca:	8d 32       	cpi	r24, 0x2D	; 45
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <vfprintf+0x92>
 3ce:	80 33       	cpi	r24, 0x30	; 48
 3d0:	69 f4       	brne	.+26     	; 0x3ec <vfprintf+0x98>
 3d2:	23 2d       	mov	r18, r3
 3d4:	21 60       	ori	r18, 0x01	; 1
 3d6:	16 c0       	rjmp	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d8:	83 2d       	mov	r24, r3
 3da:	82 60       	ori	r24, 0x02	; 2
 3dc:	38 2e       	mov	r3, r24
 3de:	e3 2d       	mov	r30, r3
 3e0:	e4 60       	ori	r30, 0x04	; 4
 3e2:	3e 2e       	mov	r3, r30
 3e4:	2a c0       	rjmp	.+84     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3e6:	f3 2d       	mov	r31, r3
 3e8:	f8 60       	ori	r31, 0x08	; 8
 3ea:	1d c0       	rjmp	.+58     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ec:	37 fc       	sbrc	r3, 7
 3ee:	2d c0       	rjmp	.+90     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3f0:	20 ed       	ldi	r18, 0xD0	; 208
 3f2:	28 0f       	add	r18, r24
 3f4:	2a 30       	cpi	r18, 0x0A	; 10
 3f6:	40 f0       	brcs	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	8e 32       	cpi	r24, 0x2E	; 46
 3fa:	b9 f4       	brne	.+46     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3fc:	36 fc       	sbrc	r3, 6
 3fe:	81 c1       	rjmp	.+770    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 400:	23 2d       	mov	r18, r3
 402:	20 64       	ori	r18, 0x40	; 64
 404:	32 2e       	mov	r3, r18
 406:	19 c0       	rjmp	.+50     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 408:	36 fe       	sbrs	r3, 6
 40a:	06 c0       	rjmp	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	98 9e       	mul	r9, r24
 410:	20 0d       	add	r18, r0
 412:	11 24       	eor	r1, r1
 414:	92 2e       	mov	r9, r18
 416:	11 c0       	rjmp	.+34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 418:	ea e0       	ldi	r30, 0x0A	; 10
 41a:	2e 9e       	mul	r2, r30
 41c:	20 0d       	add	r18, r0
 41e:	11 24       	eor	r1, r1
 420:	22 2e       	mov	r2, r18
 422:	f3 2d       	mov	r31, r3
 424:	f0 62       	ori	r31, 0x20	; 32
 426:	3f 2e       	mov	r3, r31
 428:	08 c0       	rjmp	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42a:	8c 36       	cpi	r24, 0x6C	; 108
 42c:	21 f4       	brne	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	83 2d       	mov	r24, r3
 430:	80 68       	ori	r24, 0x80	; 128
 432:	38 2e       	mov	r3, r24
 434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	88 36       	cpi	r24, 0x68	; 104
 438:	41 f4       	brne	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43a:	f7 01       	movw	r30, r14
 43c:	93 fd       	sbrc	r25, 3
 43e:	85 91       	lpm	r24, Z+
 440:	93 ff       	sbrs	r25, 3
 442:	81 91       	ld	r24, Z+
 444:	7f 01       	movw	r14, r30
 446:	81 11       	cpse	r24, r1
 448:	b3 cf       	rjmp	.-154    	; 0x3b0 <vfprintf+0x5c>
 44a:	98 2f       	mov	r25, r24
 44c:	9f 7d       	andi	r25, 0xDF	; 223
 44e:	95 54       	subi	r25, 0x45	; 69
 450:	93 30       	cpi	r25, 0x03	; 3
 452:	28 f4       	brcc	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 454:	0c 5f       	subi	r16, 0xFC	; 252
 456:	1f 4f       	sbci	r17, 0xFF	; 255
 458:	9f e3       	ldi	r25, 0x3F	; 63
 45a:	99 83       	std	Y+1, r25	; 0x01
 45c:	0d c0       	rjmp	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	31 f0       	breq	.+12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 462:	83 37       	cpi	r24, 0x73	; 115
 464:	71 f0       	breq	.+28     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 466:	83 35       	cpi	r24, 0x53	; 83
 468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	59 c0       	rjmp	.+178    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 46c:	21 c0       	rjmp	.+66     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 46e:	f8 01       	movw	r30, r16
 470:	80 81       	ld	r24, Z
 472:	89 83       	std	Y+1, r24	; 0x01
 474:	0e 5f       	subi	r16, 0xFE	; 254
 476:	1f 4f       	sbci	r17, 0xFF	; 255
 478:	88 24       	eor	r8, r8
 47a:	83 94       	inc	r8
 47c:	91 2c       	mov	r9, r1
 47e:	53 01       	movw	r10, r6
 480:	13 c0       	rjmp	.+38     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 482:	28 01       	movw	r4, r16
 484:	f2 e0       	ldi	r31, 0x02	; 2
 486:	4f 0e       	add	r4, r31
 488:	51 1c       	adc	r5, r1
 48a:	f8 01       	movw	r30, r16
 48c:	a0 80       	ld	r10, Z
 48e:	b1 80       	ldd	r11, Z+1	; 0x01
 490:	36 fe       	sbrs	r3, 6
 492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 494:	69 2d       	mov	r22, r9
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49a:	6f ef       	ldi	r22, 0xFF	; 255
 49c:	7f ef       	ldi	r23, 0xFF	; 255
 49e:	c5 01       	movw	r24, r10
 4a0:	0e 94 96 03 	call	0x72c	; 0x72c <strnlen>
 4a4:	4c 01       	movw	r8, r24
 4a6:	82 01       	movw	r16, r4
 4a8:	f3 2d       	mov	r31, r3
 4aa:	ff 77       	andi	r31, 0x7F	; 127
 4ac:	3f 2e       	mov	r3, r31
 4ae:	16 c0       	rjmp	.+44     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4b0:	28 01       	movw	r4, r16
 4b2:	22 e0       	ldi	r18, 0x02	; 2
 4b4:	42 0e       	add	r4, r18
 4b6:	51 1c       	adc	r5, r1
 4b8:	f8 01       	movw	r30, r16
 4ba:	a0 80       	ld	r10, Z
 4bc:	b1 80       	ldd	r11, Z+1	; 0x01
 4be:	36 fe       	sbrs	r3, 6
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c2:	69 2d       	mov	r22, r9
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c8:	6f ef       	ldi	r22, 0xFF	; 255
 4ca:	7f ef       	ldi	r23, 0xFF	; 255
 4cc:	c5 01       	movw	r24, r10
 4ce:	0e 94 8b 03 	call	0x716	; 0x716 <strnlen_P>
 4d2:	4c 01       	movw	r8, r24
 4d4:	f3 2d       	mov	r31, r3
 4d6:	f0 68       	ori	r31, 0x80	; 128
 4d8:	3f 2e       	mov	r3, r31
 4da:	82 01       	movw	r16, r4
 4dc:	33 fc       	sbrc	r3, 3
 4de:	1b c0       	rjmp	.+54     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 4e0:	82 2d       	mov	r24, r2
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	88 16       	cp	r8, r24
 4e6:	99 06       	cpc	r9, r25
 4e8:	b0 f4       	brcc	.+44     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 4ea:	b6 01       	movw	r22, r12
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 4f4:	2a 94       	dec	r2
 4f6:	f4 cf       	rjmp	.-24     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4f8:	f5 01       	movw	r30, r10
 4fa:	37 fc       	sbrc	r3, 7
 4fc:	85 91       	lpm	r24, Z+
 4fe:	37 fe       	sbrs	r3, 7
 500:	81 91       	ld	r24, Z+
 502:	5f 01       	movw	r10, r30
 504:	b6 01       	movw	r22, r12
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 50c:	21 10       	cpse	r2, r1
 50e:	2a 94       	dec	r2
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	82 1a       	sub	r8, r18
 514:	91 08       	sbc	r9, r1
 516:	81 14       	cp	r8, r1
 518:	91 04       	cpc	r9, r1
 51a:	71 f7       	brne	.-36     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 51c:	e8 c0       	rjmp	.+464    	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 51e:	84 36       	cpi	r24, 0x64	; 100
 520:	11 f0       	breq	.+4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 522:	89 36       	cpi	r24, 0x69	; 105
 524:	41 f5       	brne	.+80     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 526:	f8 01       	movw	r30, r16
 528:	37 fe       	sbrs	r3, 7
 52a:	07 c0       	rjmp	.+14     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 52c:	60 81       	ld	r22, Z
 52e:	71 81       	ldd	r23, Z+1	; 0x01
 530:	82 81       	ldd	r24, Z+2	; 0x02
 532:	93 81       	ldd	r25, Z+3	; 0x03
 534:	0c 5f       	subi	r16, 0xFC	; 252
 536:	1f 4f       	sbci	r17, 0xFF	; 255
 538:	08 c0       	rjmp	.+16     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 53a:	60 81       	ld	r22, Z
 53c:	71 81       	ldd	r23, Z+1	; 0x01
 53e:	07 2e       	mov	r0, r23
 540:	00 0c       	add	r0, r0
 542:	88 0b       	sbc	r24, r24
 544:	99 0b       	sbc	r25, r25
 546:	0e 5f       	subi	r16, 0xFE	; 254
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	f3 2d       	mov	r31, r3
 54c:	ff 76       	andi	r31, 0x6F	; 111
 54e:	3f 2e       	mov	r3, r31
 550:	97 ff       	sbrs	r25, 7
 552:	09 c0       	rjmp	.+18     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 554:	90 95       	com	r25
 556:	80 95       	com	r24
 558:	70 95       	com	r23
 55a:	61 95       	neg	r22
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	f0 68       	ori	r31, 0x80	; 128
 564:	3f 2e       	mov	r3, r31
 566:	2a e0       	ldi	r18, 0x0A	; 10
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	a3 01       	movw	r20, r6
 56c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__ultoa_invert>
 570:	88 2e       	mov	r8, r24
 572:	86 18       	sub	r8, r6
 574:	45 c0       	rjmp	.+138    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 576:	85 37       	cpi	r24, 0x75	; 117
 578:	31 f4       	brne	.+12     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 57a:	23 2d       	mov	r18, r3
 57c:	2f 7e       	andi	r18, 0xEF	; 239
 57e:	b2 2e       	mov	r11, r18
 580:	2a e0       	ldi	r18, 0x0A	; 10
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	25 c0       	rjmp	.+74     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 586:	93 2d       	mov	r25, r3
 588:	99 7f       	andi	r25, 0xF9	; 249
 58a:	b9 2e       	mov	r11, r25
 58c:	8f 36       	cpi	r24, 0x6F	; 111
 58e:	c1 f0       	breq	.+48     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 590:	18 f4       	brcc	.+6      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 592:	88 35       	cpi	r24, 0x58	; 88
 594:	79 f0       	breq	.+30     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 596:	b5 c0       	rjmp	.+362    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 598:	80 37       	cpi	r24, 0x70	; 112
 59a:	19 f0       	breq	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59c:	88 37       	cpi	r24, 0x78	; 120
 59e:	21 f0       	breq	.+8      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5a0:	b0 c0       	rjmp	.+352    	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
 5a2:	e9 2f       	mov	r30, r25
 5a4:	e0 61       	ori	r30, 0x10	; 16
 5a6:	be 2e       	mov	r11, r30
 5a8:	b4 fe       	sbrs	r11, 4
 5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5ac:	fb 2d       	mov	r31, r11
 5ae:	f4 60       	ori	r31, 0x04	; 4
 5b0:	bf 2e       	mov	r11, r31
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5b4:	34 fe       	sbrs	r3, 4
 5b6:	0a c0       	rjmp	.+20     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5b8:	29 2f       	mov	r18, r25
 5ba:	26 60       	ori	r18, 0x06	; 6
 5bc:	b2 2e       	mov	r11, r18
 5be:	06 c0       	rjmp	.+12     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c0:	28 e0       	ldi	r18, 0x08	; 8
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5c6:	20 e1       	ldi	r18, 0x10	; 16
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5cc:	20 e1       	ldi	r18, 0x10	; 16
 5ce:	32 e0       	ldi	r19, 0x02	; 2
 5d0:	f8 01       	movw	r30, r16
 5d2:	b7 fe       	sbrs	r11, 7
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5d6:	60 81       	ld	r22, Z
 5d8:	71 81       	ldd	r23, Z+1	; 0x01
 5da:	82 81       	ldd	r24, Z+2	; 0x02
 5dc:	93 81       	ldd	r25, Z+3	; 0x03
 5de:	0c 5f       	subi	r16, 0xFC	; 252
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5e4:	60 81       	ld	r22, Z
 5e6:	71 81       	ldd	r23, Z+1	; 0x01
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 5f       	subi	r16, 0xFE	; 254
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	a3 01       	movw	r20, r6
 5f2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__ultoa_invert>
 5f6:	88 2e       	mov	r8, r24
 5f8:	86 18       	sub	r8, r6
 5fa:	fb 2d       	mov	r31, r11
 5fc:	ff 77       	andi	r31, 0x7F	; 127
 5fe:	3f 2e       	mov	r3, r31
 600:	36 fe       	sbrs	r3, 6
 602:	0d c0       	rjmp	.+26     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 604:	23 2d       	mov	r18, r3
 606:	2e 7f       	andi	r18, 0xFE	; 254
 608:	a2 2e       	mov	r10, r18
 60a:	89 14       	cp	r8, r9
 60c:	58 f4       	brcc	.+22     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 60e:	34 fe       	sbrs	r3, 4
 610:	0b c0       	rjmp	.+22     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 612:	32 fc       	sbrc	r3, 2
 614:	09 c0       	rjmp	.+18     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 616:	83 2d       	mov	r24, r3
 618:	8e 7e       	andi	r24, 0xEE	; 238
 61a:	a8 2e       	mov	r10, r24
 61c:	05 c0       	rjmp	.+10     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 61e:	b8 2c       	mov	r11, r8
 620:	a3 2c       	mov	r10, r3
 622:	03 c0       	rjmp	.+6      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 624:	b8 2c       	mov	r11, r8
 626:	01 c0       	rjmp	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 628:	b9 2c       	mov	r11, r9
 62a:	a4 fe       	sbrs	r10, 4
 62c:	0f c0       	rjmp	.+30     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 62e:	fe 01       	movw	r30, r28
 630:	e8 0d       	add	r30, r8
 632:	f1 1d       	adc	r31, r1
 634:	80 81       	ld	r24, Z
 636:	80 33       	cpi	r24, 0x30	; 48
 638:	21 f4       	brne	.+8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63a:	9a 2d       	mov	r25, r10
 63c:	99 7e       	andi	r25, 0xE9	; 233
 63e:	a9 2e       	mov	r10, r25
 640:	09 c0       	rjmp	.+18     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 642:	a2 fe       	sbrs	r10, 2
 644:	06 c0       	rjmp	.+12     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 646:	b3 94       	inc	r11
 648:	b3 94       	inc	r11
 64a:	04 c0       	rjmp	.+8      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 64c:	8a 2d       	mov	r24, r10
 64e:	86 78       	andi	r24, 0x86	; 134
 650:	09 f0       	breq	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 652:	b3 94       	inc	r11
 654:	a3 fc       	sbrc	r10, 3
 656:	11 c0       	rjmp	.+34     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 658:	a0 fe       	sbrs	r10, 0
 65a:	06 c0       	rjmp	.+12     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 65c:	b2 14       	cp	r11, r2
 65e:	88 f4       	brcc	.+34     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 660:	28 0c       	add	r2, r8
 662:	92 2c       	mov	r9, r2
 664:	9b 18       	sub	r9, r11
 666:	0e c0       	rjmp	.+28     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 668:	b2 14       	cp	r11, r2
 66a:	60 f4       	brcc	.+24     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 66c:	b6 01       	movw	r22, r12
 66e:	80 e2       	ldi	r24, 0x20	; 32
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 676:	b3 94       	inc	r11
 678:	f7 cf       	rjmp	.-18     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 67a:	b2 14       	cp	r11, r2
 67c:	18 f4       	brcc	.+6      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 67e:	2b 18       	sub	r2, r11
 680:	02 c0       	rjmp	.+4      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 682:	98 2c       	mov	r9, r8
 684:	21 2c       	mov	r2, r1
 686:	a4 fe       	sbrs	r10, 4
 688:	10 c0       	rjmp	.+32     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 68a:	b6 01       	movw	r22, r12
 68c:	80 e3       	ldi	r24, 0x30	; 48
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 694:	a2 fe       	sbrs	r10, 2
 696:	17 c0       	rjmp	.+46     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 698:	a1 fc       	sbrc	r10, 1
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 69c:	88 e7       	ldi	r24, 0x78	; 120
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 6a2:	88 e5       	ldi	r24, 0x58	; 88
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	b6 01       	movw	r22, r12
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6aa:	8a 2d       	mov	r24, r10
 6ac:	86 78       	andi	r24, 0x86	; 134
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6b0:	a1 fe       	sbrs	r10, 1
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6b4:	8b e2       	ldi	r24, 0x2B	; 43
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 6b8:	80 e2       	ldi	r24, 0x20	; 32
 6ba:	a7 fc       	sbrc	r10, 7
 6bc:	8d e2       	ldi	r24, 0x2D	; 45
 6be:	b6 01       	movw	r22, r12
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 6c6:	89 14       	cp	r8, r9
 6c8:	38 f4       	brcc	.+14     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
 6ca:	b6 01       	movw	r22, r12
 6cc:	80 e3       	ldi	r24, 0x30	; 48
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 6d4:	9a 94       	dec	r9
 6d6:	f7 cf       	rjmp	.-18     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6d8:	8a 94       	dec	r8
 6da:	f3 01       	movw	r30, r6
 6dc:	e8 0d       	add	r30, r8
 6de:	f1 1d       	adc	r31, r1
 6e0:	80 81       	ld	r24, Z
 6e2:	b6 01       	movw	r22, r12
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 6ea:	81 10       	cpse	r8, r1
 6ec:	f5 cf       	rjmp	.-22     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
 6ee:	22 20       	and	r2, r2
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6f2:	42 ce       	rjmp	.-892    	; 0x378 <vfprintf+0x24>
 6f4:	b6 01       	movw	r22, r12
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 6fe:	2a 94       	dec	r2
 700:	f6 cf       	rjmp	.-20     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 702:	f6 01       	movw	r30, r12
 704:	86 81       	ldd	r24, Z+6	; 0x06
 706:	97 81       	ldd	r25, Z+7	; 0x07
 708:	02 c0       	rjmp	.+4      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	9f ef       	ldi	r25, 0xFF	; 255
 70e:	2b 96       	adiw	r28, 0x0b	; 11
 710:	e2 e1       	ldi	r30, 0x12	; 18
 712:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__epilogue_restores__>

00000716 <strnlen_P>:
 716:	fc 01       	movw	r30, r24
 718:	05 90       	lpm	r0, Z+
 71a:	61 50       	subi	r22, 0x01	; 1
 71c:	70 40       	sbci	r23, 0x00	; 0
 71e:	01 10       	cpse	r0, r1
 720:	d8 f7       	brcc	.-10     	; 0x718 <strnlen_P+0x2>
 722:	80 95       	com	r24
 724:	90 95       	com	r25
 726:	8e 0f       	add	r24, r30
 728:	9f 1f       	adc	r25, r31
 72a:	08 95       	ret

0000072c <strnlen>:
 72c:	fc 01       	movw	r30, r24
 72e:	61 50       	subi	r22, 0x01	; 1
 730:	70 40       	sbci	r23, 0x00	; 0
 732:	01 90       	ld	r0, Z+
 734:	01 10       	cpse	r0, r1
 736:	d8 f7       	brcc	.-10     	; 0x72e <strnlen+0x2>
 738:	80 95       	com	r24
 73a:	90 95       	com	r25
 73c:	8e 0f       	add	r24, r30
 73e:	9f 1f       	adc	r25, r31
 740:	08 95       	ret

00000742 <fputc>:
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	fb 01       	movw	r30, r22
 74c:	23 81       	ldd	r18, Z+3	; 0x03
 74e:	21 fd       	sbrc	r18, 1
 750:	03 c0       	rjmp	.+6      	; 0x758 <fputc+0x16>
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	9f ef       	ldi	r25, 0xFF	; 255
 756:	2c c0       	rjmp	.+88     	; 0x7b0 <fputc+0x6e>
 758:	22 ff       	sbrs	r18, 2
 75a:	16 c0       	rjmp	.+44     	; 0x788 <fputc+0x46>
 75c:	46 81       	ldd	r20, Z+6	; 0x06
 75e:	57 81       	ldd	r21, Z+7	; 0x07
 760:	24 81       	ldd	r18, Z+4	; 0x04
 762:	35 81       	ldd	r19, Z+5	; 0x05
 764:	42 17       	cp	r20, r18
 766:	53 07       	cpc	r21, r19
 768:	44 f4       	brge	.+16     	; 0x77a <fputc+0x38>
 76a:	a0 81       	ld	r26, Z
 76c:	b1 81       	ldd	r27, Z+1	; 0x01
 76e:	9d 01       	movw	r18, r26
 770:	2f 5f       	subi	r18, 0xFF	; 255
 772:	3f 4f       	sbci	r19, 0xFF	; 255
 774:	31 83       	std	Z+1, r19	; 0x01
 776:	20 83       	st	Z, r18
 778:	8c 93       	st	X, r24
 77a:	26 81       	ldd	r18, Z+6	; 0x06
 77c:	37 81       	ldd	r19, Z+7	; 0x07
 77e:	2f 5f       	subi	r18, 0xFF	; 255
 780:	3f 4f       	sbci	r19, 0xFF	; 255
 782:	37 83       	std	Z+7, r19	; 0x07
 784:	26 83       	std	Z+6, r18	; 0x06
 786:	14 c0       	rjmp	.+40     	; 0x7b0 <fputc+0x6e>
 788:	8b 01       	movw	r16, r22
 78a:	ec 01       	movw	r28, r24
 78c:	fb 01       	movw	r30, r22
 78e:	00 84       	ldd	r0, Z+8	; 0x08
 790:	f1 85       	ldd	r31, Z+9	; 0x09
 792:	e0 2d       	mov	r30, r0
 794:	09 95       	icall
 796:	89 2b       	or	r24, r25
 798:	e1 f6       	brne	.-72     	; 0x752 <fputc+0x10>
 79a:	d8 01       	movw	r26, r16
 79c:	16 96       	adiw	r26, 0x06	; 6
 79e:	8d 91       	ld	r24, X+
 7a0:	9c 91       	ld	r25, X
 7a2:	17 97       	sbiw	r26, 0x07	; 7
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	17 96       	adiw	r26, 0x07	; 7
 7a8:	9c 93       	st	X, r25
 7aa:	8e 93       	st	-X, r24
 7ac:	16 97       	sbiw	r26, 0x06	; 6
 7ae:	ce 01       	movw	r24, r28
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	08 95       	ret

000007ba <__ultoa_invert>:
 7ba:	fa 01       	movw	r30, r20
 7bc:	aa 27       	eor	r26, r26
 7be:	28 30       	cpi	r18, 0x08	; 8
 7c0:	51 f1       	breq	.+84     	; 0x816 <__ultoa_invert+0x5c>
 7c2:	20 31       	cpi	r18, 0x10	; 16
 7c4:	81 f1       	breq	.+96     	; 0x826 <__ultoa_invert+0x6c>
 7c6:	e8 94       	clt
 7c8:	6f 93       	push	r22
 7ca:	6e 7f       	andi	r22, 0xFE	; 254
 7cc:	6e 5f       	subi	r22, 0xFE	; 254
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	af 4f       	sbci	r26, 0xFF	; 255
 7d6:	b1 e0       	ldi	r27, 0x01	; 1
 7d8:	3e d0       	rcall	.+124    	; 0x856 <__ultoa_invert+0x9c>
 7da:	b4 e0       	ldi	r27, 0x04	; 4
 7dc:	3c d0       	rcall	.+120    	; 0x856 <__ultoa_invert+0x9c>
 7de:	67 0f       	add	r22, r23
 7e0:	78 1f       	adc	r23, r24
 7e2:	89 1f       	adc	r24, r25
 7e4:	9a 1f       	adc	r25, r26
 7e6:	a1 1d       	adc	r26, r1
 7e8:	68 0f       	add	r22, r24
 7ea:	79 1f       	adc	r23, r25
 7ec:	8a 1f       	adc	r24, r26
 7ee:	91 1d       	adc	r25, r1
 7f0:	a1 1d       	adc	r26, r1
 7f2:	6a 0f       	add	r22, r26
 7f4:	71 1d       	adc	r23, r1
 7f6:	81 1d       	adc	r24, r1
 7f8:	91 1d       	adc	r25, r1
 7fa:	a1 1d       	adc	r26, r1
 7fc:	20 d0       	rcall	.+64     	; 0x83e <__ultoa_invert+0x84>
 7fe:	09 f4       	brne	.+2      	; 0x802 <__ultoa_invert+0x48>
 800:	68 94       	set
 802:	3f 91       	pop	r19
 804:	2a e0       	ldi	r18, 0x0A	; 10
 806:	26 9f       	mul	r18, r22
 808:	11 24       	eor	r1, r1
 80a:	30 19       	sub	r19, r0
 80c:	30 5d       	subi	r19, 0xD0	; 208
 80e:	31 93       	st	Z+, r19
 810:	de f6       	brtc	.-74     	; 0x7c8 <__ultoa_invert+0xe>
 812:	cf 01       	movw	r24, r30
 814:	08 95       	ret
 816:	46 2f       	mov	r20, r22
 818:	47 70       	andi	r20, 0x07	; 7
 81a:	40 5d       	subi	r20, 0xD0	; 208
 81c:	41 93       	st	Z+, r20
 81e:	b3 e0       	ldi	r27, 0x03	; 3
 820:	0f d0       	rcall	.+30     	; 0x840 <__ultoa_invert+0x86>
 822:	c9 f7       	brne	.-14     	; 0x816 <__ultoa_invert+0x5c>
 824:	f6 cf       	rjmp	.-20     	; 0x812 <__ultoa_invert+0x58>
 826:	46 2f       	mov	r20, r22
 828:	4f 70       	andi	r20, 0x0F	; 15
 82a:	40 5d       	subi	r20, 0xD0	; 208
 82c:	4a 33       	cpi	r20, 0x3A	; 58
 82e:	18 f0       	brcs	.+6      	; 0x836 <__ultoa_invert+0x7c>
 830:	49 5d       	subi	r20, 0xD9	; 217
 832:	31 fd       	sbrc	r19, 1
 834:	40 52       	subi	r20, 0x20	; 32
 836:	41 93       	st	Z+, r20
 838:	02 d0       	rcall	.+4      	; 0x83e <__ultoa_invert+0x84>
 83a:	a9 f7       	brne	.-22     	; 0x826 <__ultoa_invert+0x6c>
 83c:	ea cf       	rjmp	.-44     	; 0x812 <__ultoa_invert+0x58>
 83e:	b4 e0       	ldi	r27, 0x04	; 4
 840:	a6 95       	lsr	r26
 842:	97 95       	ror	r25
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	ba 95       	dec	r27
 84c:	c9 f7       	brne	.-14     	; 0x840 <__ultoa_invert+0x86>
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	61 05       	cpc	r22, r1
 852:	71 05       	cpc	r23, r1
 854:	08 95       	ret
 856:	9b 01       	movw	r18, r22
 858:	ac 01       	movw	r20, r24
 85a:	0a 2e       	mov	r0, r26
 85c:	06 94       	lsr	r0
 85e:	57 95       	ror	r21
 860:	47 95       	ror	r20
 862:	37 95       	ror	r19
 864:	27 95       	ror	r18
 866:	ba 95       	dec	r27
 868:	c9 f7       	brne	.-14     	; 0x85c <__ultoa_invert+0xa2>
 86a:	62 0f       	add	r22, r18
 86c:	73 1f       	adc	r23, r19
 86e:	84 1f       	adc	r24, r20
 870:	95 1f       	adc	r25, r21
 872:	a0 1d       	adc	r26, r0
 874:	08 95       	ret

00000876 <__prologue_saves__>:
 876:	2f 92       	push	r2
 878:	3f 92       	push	r3
 87a:	4f 92       	push	r4
 87c:	5f 92       	push	r5
 87e:	6f 92       	push	r6
 880:	7f 92       	push	r7
 882:	8f 92       	push	r8
 884:	9f 92       	push	r9
 886:	af 92       	push	r10
 888:	bf 92       	push	r11
 88a:	cf 92       	push	r12
 88c:	df 92       	push	r13
 88e:	ef 92       	push	r14
 890:	ff 92       	push	r15
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	ca 1b       	sub	r28, r26
 8a0:	db 0b       	sbc	r29, r27
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	f8 94       	cli
 8a6:	de bf       	out	0x3e, r29	; 62
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	09 94       	ijmp

000008ae <__epilogue_restores__>:
 8ae:	2a 88       	ldd	r2, Y+18	; 0x12
 8b0:	39 88       	ldd	r3, Y+17	; 0x11
 8b2:	48 88       	ldd	r4, Y+16	; 0x10
 8b4:	5f 84       	ldd	r5, Y+15	; 0x0f
 8b6:	6e 84       	ldd	r6, Y+14	; 0x0e
 8b8:	7d 84       	ldd	r7, Y+13	; 0x0d
 8ba:	8c 84       	ldd	r8, Y+12	; 0x0c
 8bc:	9b 84       	ldd	r9, Y+11	; 0x0b
 8be:	aa 84       	ldd	r10, Y+10	; 0x0a
 8c0:	b9 84       	ldd	r11, Y+9	; 0x09
 8c2:	c8 84       	ldd	r12, Y+8	; 0x08
 8c4:	df 80       	ldd	r13, Y+7	; 0x07
 8c6:	ee 80       	ldd	r14, Y+6	; 0x06
 8c8:	fd 80       	ldd	r15, Y+5	; 0x05
 8ca:	0c 81       	ldd	r16, Y+4	; 0x04
 8cc:	1b 81       	ldd	r17, Y+3	; 0x03
 8ce:	aa 81       	ldd	r26, Y+2	; 0x02
 8d0:	b9 81       	ldd	r27, Y+1	; 0x01
 8d2:	ce 0f       	add	r28, r30
 8d4:	d1 1d       	adc	r29, r1
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	ed 01       	movw	r28, r26
 8e2:	08 95       	ret

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
